// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  CLIENT
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  name      String?
  role      Role     @default(CLIENT)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  orders   Order[] // Only for clients
  products Product[] // Only for admins - tracks who created/modified products
}

model Product {
  id          String    @id @default(uuid())
  name        String
  description String?
  price       Decimal   @db.Money
  stock       Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  // Track who created/modified the product
  createdBy   User      @relation(fields: [userId], references: [id])
  userId      String

  // Relationship with orders
  orderItems OrderItem[]
}

model Order {
  id        String      @id @default(uuid())
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  status    OrderStatus

  // Relations
  user       User        @relation(fields: [userId], references: [id])
  userId     String
  orderItems OrderItem[]
}

model OrderItem {
  id       String  @id @default(uuid())
  quantity Int
  price    Decimal @db.Money

  // Relations
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   String
  product   Product @relation(fields: [productId], references: [id])
  productId String

  @@unique([orderId, productId])
}

enum OrderStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
}
